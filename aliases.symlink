# some more ls aliases
alias ll="ls -l"
alias la='ls -la'
alias l='ls -CF'
alias tmux='TERM=screen-256color-bce tmux'
alias cal='cal -m'
cl() { cd "$@" && l; }
alias cdu='cd $(ls -rtd */ | tail -1)'
alias h='history'
alias j="jobs -l"
zipdelete() { zipinfo -1 "$@" | xargs -d '\n' rm; }
alias c=clear
alias r=reset

alias du="du -h"
alias dh="dh -h"

alias -g g="| grep"
# Visual bell (urgency)
alias -g u=" && echo -e \"\a\""

compdef _git gco_deps=git-checkout

graphviz() {dot "$@" -Tps | /usr/bin/gv -}

alias random_pswd='apg -a 1'

alias vimlight='VIM_LIGHT_COLOR=true vim'

rmbigdir() {ls -f $1 | xargs -n 100 rm}
tophistory() {history | awk '{CMD[$3]++;count++;}END { for (a in CMD)print CMD[a] " " CMD[a]/count*100 "% " a;}' | grep -v "./" | column -c3 -s " " -t | sort -nr | nl | head -n10}
create_tar() {tar -zcvf $(basename $1).tar.gz $1}

alias mtr='mtr --curses'
alias git_status_on='git config --add oh-my-zsh.hide-status 0'
alias git_status_off='git config --add oh-my-zsh.hide-status 1'

alias docker_last_ip='docker inspect --format {{.NetworkSettings.IPAddress}} $(docker ps -l -q)'
alias docker_last_id='docker ps -l -q'

alias docker_last_logs='docker logs $(docker_last_id)'
docker_image_clean() {
    for i in $(docker images | grep "\<none\>" | awk '{print $3}'); do
        docker rmi $i
    done

}

docker_container_clean() {
    docker rm $(docker ps -a -q)
}

alias fuck='eval $(thefuck $(fc -ln -1 | tail -n 1)); fc -R'
alias :q='echo It is not vim'
alias gl='git pull && git submodule update --init --recursive'
alias bigpkg="pacman -Qi | egrep '^(Name|Installed)' | cut -f2 -d':' | paste - - | column -t | sort -nrk 2 | grep MiB | less"

alias cdlast='cd "$(find . -maxdepth 1 -type d | sort | tail -1)"'

vs() {
 vim "+:Ack $1"
}

alias steam='STEAM_RUNTIME=0 steam'
alias keyboard='setxkbmap -layout us,ru -variant -option grp:rwin_toggle ctrl:nocaps && xmodmap ~/.xmodmaprc'

link_to_local() {
 local FILE=$(readlink -f $1)
 local DST=/usr/local/bin/$(basename "$FILE")
 if [ -f "$DST" ]; then
    echo "Already exist $DST"
    fail
 else
    echo "Link $FILE to $DST"
    sudo ln -s "$FILE" "$DST"
 fi
}

w() {
    if [ $# -eq 0 ]; then
        curl http://wttr.in/Novosibirsk\?T
    else
        curl http://wttr.in/$1\?T
    fi
}

wiki() {
 w3m 'https://wiki.archlinux.org/index.php/'$1
}

get_tasks() {
    pushd ~/develop/ptsecurity
    JSQL="assignee = currentUser() AND resolution = Unresolved order by updated DESC"
    for i in $(jira list --query="$JSQL"  --template json | jq --raw-output '.issues[].key'); do
        if [ -d "$i" ]; then
            continue
        fi
        git clone git@gitlab.ptsecurity.com:cybsi/cybsi.git "$i"
        pushd ./"$i"
        git checkout -b "$i"
    done
    popd
}

clean_tasks() {
    pushd ~/develop/ptsecurity
    mkdir -p done_task
    JSQL="assignee = currentUser() AND resolution = Done order by updated DESC"
    for i in $(jira list --query="$JSQL"  --template json | jq --raw-output '.issues[].key'); do
        if [ -d "$i" ]; then
            echo "Move $i"
            mv "$i" ./done_task
        fi
    done
    popd
}

show_task() {
    TASK=$(basename "$PWD")
    jira view "$TASK"
}

load_env() {
    ENVFILE=$1
    if [ -f "$ENVFILE" ]; then
       set -o allexport 
       source "$ENVFILE"
       set +o allexport 
    else
        echo "Set exist envfile: $1"
    fi
}

create_token() {
    GIT_REPO=$(git remote get-url origin)
    if [ "$GIT_REPO" = "git@gitlab.ptsecurity.com:cybsi/cybsi.git" ]; then
        if [ -f ".env" ]; then
            load_env .env
        fi

        if [ -f ./bin/cybsi ]; then
            ./bin/cybsi user create a --use-all-roles --access-level=Red --full-name "A" --email "a@a.com"
            TOKEN=$(./bin/cybsi gen-token --use-all-roles --access-level Red a)
            export BEARER="Authorization: Bearer $TOKEN"
        else
            echo "Dont find ./bin/cybsi"
        fi
    else
        echo "Need cybsi project"
    fi
}
